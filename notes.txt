- express pour la gestion de cors 
  npm i express
  npm init -y
  npm install cors
  ** demarrer avec node server.js
  
  ajouter dans package.json  "type": "module",
  par ex 
  "name": "test-vanilla",
  "version": "1.0.0",
  "type": "module",

  pour basculer en module ES et accepter de faire des fetchs !!


  pour faire fonctionner letta et son agent en local sur un port 3000 :
  modifier l'url à fetcher : http://localhost:3000/proxy?url=http://localhost:8283/v1/agents/agent-9fffcce6-08b0-463e-bf5a-a476b0ac19ef/messages
  (cf swagger http://localhost:8283/docs)
  nb : GET => http://localhost:8283/v1/agents/agent-9fffcce6-08b0-463e-bf5a-a476b0ac19ef



  modifier :
  => body: JSON.stringify({
                contents: [{ role: "user", parts: [{ text: prompt }] }]
            }), 

  en 
  => body: JSON.stringify({
                messages: [{ role: "user",
                content: prompt}
                    ]}),


ex de requete du coup dans postman : 
{
  "messages": [
    {
      "role": "user",
      "content": "blabla."
    }
  ]
}

et concernant l'agent LETTA : 
docker run   -v ~/.letta/.persist/pgdata:/var/lib/postgresql/data   -p 8283:8283   -e GEMINI_API_KEY="AIzaSyDDdgZRtt__GDiz2RvkEWTEb7hR9AmF73Q"   letta/letta:latest

et normalement : 
docker ps
CONTAINER ID  IMAGE                 COMMAND                  CREATED        STATUS        PORTS                                                                
d3192650be47  letta/letta:latest   "/usr/local/bin/dock…"   17 hours ago   Up 17 hours   4317-4318/tcp, 5432/tcp, 0.0.0.0:8283->8283/tcp, :::8283->8283/tcp  
 NAMES nervous_swartz


 accessible sur http://localhost:8283

 + créer l'agent cf screenshot


   si clé api letta : 
  https://api.letta.com/v1/agents/agent-85cfbc6c-09ac-41ec-bd79-e8dbb836fb49/messages
  et ajouter dans le header : 
 "Authorization": "Bearer sk-let-YmNjNDZkZjctYzU1ZS00ZDA5LWIyZWYtZjM2OTk3MjgyMjgzOmM5ODIxODM5LWU1YzQtNDE4ZS05YzBkLWJjOWVjMmE3YWIwNA=="



 
		human : 
		L'utilisateur a créé une petite interface web où lorsqu'il clique sur "générer un film", il interroge l’intelligence artificielle pour proposer un film à regarder. 
l'utilisateur est français et ne comprends que le français.
il peut choisir le genre de film  : 
-Action / aventure
-Familial
-Comédie
-Science fiction
-Drame


persona : 
je suis un assistant virtuel spécialisé dans la recommandation de films. Ma mission est de  proposer **une suggestion de film pertinente et variée** à regarder en fonction du genre que indiqué. **j'essaie d'éviter de répéter les mêmes suggestions ou de choisir systématiquement les films les plus populaires ou les plus évidents du genre demandé.**

Quand on me demande :
    "Propose-moi un film d'aventure."

je dois **impérativement** répondre **UNIQUEMENT** avec le JSON suivant, sans aucune phrase d'introduction, d'explication ou de conclusion :
{
    "film": "Titre du film",                 // Le titre exact du film proposé
    "genre": "aventure",                     // Le genre que j'ai demandé, ou un sous-genre très proche
    "année": "Année de sortie",             // L'année de sortie (juste l'année, ex: 1999)
    "synopsis": "Un court résumé pertinent." // Un synopsis concis (1-3 phrases)
}

**Important :** La clé pour varier les suggestions est de ne pas toujours choisir le film le plus connu pour le genre aventure. Explorer des options peut-être un peu moins courantes mais toujours représentatives et de qualité.

Maintenant, j'exécute la tâche : propose-moi un film d'aventure en respectant **strictement** ce format JSON et les instructions de variété.
		